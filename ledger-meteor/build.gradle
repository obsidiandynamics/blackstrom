def packageName = "blackstrom-ledger-meteor"
version = project(":").version
  
ext {
  meteorVersion = "0.10.0"
  hazelcastVersion = "3.10.2"
}
  
dependencies {
  compile project(":")
  compile "com.obsidiandynamics.fulcrum:fulcrum-retry:${fulcrumVersion}"
  compile "com.obsidiandynamics.meteor:meteor-core:${meteorVersion}"
  compile "com.hazelcast:hazelcast:${hazelcastVersion}"
  
  testCompile project(":blackstrom-codec-jackson")
  testCompile project(":blackstrom-codec-jackson").sourceSets.test.output
  testCompile project(":blackstrom-codec-kryo")
  testCompile project(":blackstrom-codec-kryo").sourceSets.test.output
  testCompile project(":blackstrom-sim")
  testCompile project(":blackstrom-sim").sourceSets.test.output
  testCompile "com.obsidiandynamics.fulcrum:fulcrum-jgroups:${fulcrumVersion}"
  testCompile "com.obsidiandynamics.fulcrum:fulcrum-select:${fulcrumVersion}"
  testCompile "com.obsidiandynamics.meteor:meteor-assurance:${meteorVersion}"
  testCompile "com.hazelcast:hazelcast:${hazelcastVersion}:tests"
}

task addLauncherApps() {
  project(":").launcherClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  project(":").launcherClasses += "com.obsidiandynamics.blackstrom.bank.MeteorKryoRandomBankTransferTest"
  project(":").launcherClasses += "com.obsidiandynamics.blackstrom.ledger.MeteorKryoLedgerTest"
}

jar {
  baseName packageName
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = "javadoc"
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = "sources"
}
 
artifacts {
  archives jar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(":").group
      artifactId packageName
      version project(":").version
      from components.java
      artifact jar
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

def envUser = "BINTRAY_USER"
def envKey = "BINTRAY_KEY"
def packageDesc = "Meteor-based ledger implementation"
def repoName = "blackstrom"
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ["mavenJava"]
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = "obsidiandynamics"
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ["BSD New"]
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = true
    version {
      name = project(":").version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(":").version
    }
  }
}

task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  mergeServiceFiles()
  classifier = 'tests'
  from sourceSets.main.output
  from sourceSets.test.output
  configurations = [project.configurations.compile, project.configurations.runtime,
                    project.configurations.testCompile, project.configurations.testRuntime]
}
