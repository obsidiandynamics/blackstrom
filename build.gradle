plugins {
  id "com.jfrog.bintray" version "1.8.2"
  id "com.github.johnrengelman.shadow" version "2.0.3"
}
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

group = "com.obsidiandynamics.blackstrom"
version = "0.4.0-SNAPSHOT"
  
def envUser = "BINTRAY_USER"
def envKey = "BINTRAY_KEY"
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

allprojects {
  apply plugin: "java"
  apply plugin: "jacoco"
  apply plugin: "maven-publish"
  apply plugin: "com.jfrog.bintray"
  apply plugin: "com.github.johnrengelman.shadow"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }
  
  ext {
    fulcrumVersion = "0.15.2"
    yconfVersion = "0.5.0"
    zerologVersion = "0.16.0"
  }
  
  dependencies {
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-await:${fulcrumVersion}"
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-junit:${fulcrumVersion}"
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-testmark:${fulcrumVersion}"
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-threads:${fulcrumVersion}"
    testCompile "com.obsidiandynamics.yconf:yconf-snakeyaml:${yconfVersion}"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.18.0"
    testCompile "org.hdrhistogram:HdrHistogram:2.1.10"
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.4.7"

    testRuntime "org.slf4j:slf4j-log4j12:1.7.25"
    testRuntime "log4j:log4j:1.2.17"
  }
    
  compileJava {
    options.compilerArgs += "-proc:none"
  }

  compileTestJava {
    options.compilerArgs += "-proc:none"
  }
  
  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }
  
  def testJvmArgs = [
    "--add-opens=java.base/java.lang=ALL-UNNAMED",
    "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
    "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    "--add-opens=java.base/java.nio=ALL-UNNAMED",
    "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED"
  ]

  test {
    exclude "**/*IT.class"
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      jvmArgs += testJvmArgs
    }
  }
  
  task integrationTest(type: Test, description: "Runs integration tests", group: "Verification") {
    include "**/*IT.class"
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      jvmArgs += testJvmArgs
    }
  }

  jacoco {
    toolVersion = "0.8.1"
  }
  
  javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      options.addStringOption("quiet", "-html5")
    }
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    executionData = files("$buildDir/jacoco/test.exec") + files("$buildDir/jacoco/integrationTest.exec")
    reports {
      html.enabled true
      xml.enabled true
      csv.enabled false
    }
  }

  javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      options.addStringOption("quiet", "-html5")
    }
  }

  // invoke this task when ready to publish to Bintray
  bintrayUpload {
    dependsOn ":bintrayCredentialsCheck"
    dependsOn "jar"
    dependsOn "sourcesJar"
    dependsOn "javadocJar"
    dependsOn "generatePomFileForMavenJavaPublication"
  }
}

subprojects {
  dependencies {
    testCompile project(":").sourceSets.test.output
  }
}

task jacocoRootReport(type: JacocoReport) {
  mustRunAfter = allprojects.test + allprojects.integrationTest
  additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(allprojects.sourceSets.main.output)
  executionData = files(allprojects.jacocoTestReport.executionData)
  reports {
    html.enabled true
    xml.enabled true
    csv.enabled false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["sample/**", "**/*Uncovered*", "**/generated/**"])
    })
  }
}

def packageName = "blackstrom-core"

dependencies {
  compile "com.obsidiandynamics.fulcrum:fulcrum-concat:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-flow:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-func:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-nanoclock:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-node-queue:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-props:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-scheduler:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-worker:${fulcrumVersion}"
  compile "com.obsidiandynamics.yconf:yconf-core:${yconfVersion}"
  compile "com.obsidiandynamics.zerolog:zerolog-core:${zerologVersion}"
  compile "org.apache.commons:commons-lang3:3.7"
  runtime "com.obsidiandynamics.zerolog:zerolog-slf4j17:${zerologVersion}"
  runtime "org.slf4j:slf4j-api:1.7.25"
  
  testRuntime "com.obsidiandynamics.fulcrum:fulcrum-launcher:${fulcrumVersion}"
}

project.ext.set("launcherClasspath", new org.gradle.api.internal.file.UnionFileCollection())
project.ext.set("launcherClasses", new ArrayList())

task addLauncherApps() {
  project(":").launcherClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  project(":").launcherClasses += "com.obsidiandynamics.blackstrom.ledger.MultiNodeQueueLedgerTest"
  project(":").launcherClasses += "com.obsidiandynamics.blackstrom.scheduler.TaskSchedulerTest"
}

task launch() {
  dependsOn allprojects*.tasks*.findByName("testClasses")
  doLast {
    def baseJvmArgs = "-XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark " + 
                      "-XX:-UseBiasedLocking -Xms2G -Xmx2G -Xss1M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 " + 
                      "-XX:InitiatingHeapOccupancyPercent=0 -Djava.net.preferIPv4Stack=true " + 
                      "-Dlauncher.package.compress.level=3"
    javaexec {
      systemProperties = System.properties
      classpath = project(":").launcherClasspath
      main = "com.obsidiandynamics.launcher.Launcher"
      args = project(":").launcherClasses
      jvmArgs = Arrays.asList baseJvmArgs.split(" ")
      standardInput = System.in
    }
  }
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = "javadoc"
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = "sources"
}
 
artifacts {
  archives jar
}

publishing {
  publications {
	mavenJava(MavenPublication) {
      from components.java
      afterEvaluate {
        groupId project(":").group
        artifactId packageName
        version project(":").version
        artifact jar
        artifact sourcesJar
        artifact javadocJar
      }
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

def packageDesc = "Transactional service mesh for the JVM"
def repoName = "blackstrom"
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ["mavenJava"]
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = "obsidiandynamics"
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ["BSD New"]
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = true
    version {
      name = project(":").version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(":").version
    }
  }
}
