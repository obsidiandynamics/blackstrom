plugins {
  id "com.github.johnrengelman.shadow" version "7.1.2"
  id "com.github.ben-manes.versions" version "0.42.0"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username = findProperty('sonatype.username')
      password = findProperty('sonatype.password')
    }
  }
}

def baseJvmArgs = [
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "-XX:-MaxFDLimit"
]
project.ext.set("baseJvmArgs", baseJvmArgs)

static def getBlackstromSystemProperties() {
  def filteredProps = new Properties()
  for (def propKey : System.getProperties().stringPropertyNames()) {
    if (propKey.startsWith("blackstrom.")) {
      filteredProps.setProperty(propKey, System.getProperties().getProperty(propKey))
    }
  }
  return filteredProps
}

allprojects {
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: "com.github.johnrengelman.shadow"

  group = "com.obsidiandynamics.blackstrom"
  version = "0.59.0"

  sourceCompatibility = 11
  targetCompatibility = 11

  //TODO remove when Javadoc errors have been resolved
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }

  configurations {
    api.canBeResolved = true
    testImplementation.canBeResolved = true
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  signing {
    sign publishing.publications
  }

  ext {
    assertjVersion = "3.12.2"
    commonsLangVersion = "3.9"
    equalsverifierVersion = "3.10"
    fulcrumVersion = "0.38.0"
    hazelcastVersion = "3.12"
    hdrHistogramVersion = "2.1.11"
    jackdawVersion = "1.36.0"
    jacksonVersion = "2.9.9"
    jgroupsVersion = "4.1.0.Final"
    junitVersion = "4.12"
    log4jVersion = "1.2.17"
    kafkaVersion = "2.4.0"
    kryoVersion = "5.0.0-RC4"
    meteorVersion = "0.26.0"
    mockitoVersion = "2.28.2"
    pojotesterVersion = "0.9.0"
    slf4jVersion = "1.7.25"
    yconfVersion = "0.22.0"
    zerologVersion = "0.32.0"
  }
  
  dependencies {
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-await:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-junit:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-mockito:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-testmark:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-threads:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-verifier:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.yconf:yconf-snakeyaml:${yconfVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}"
    testImplementation "com.obsidiandynamics.pojotester:core:${pojotesterVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    testImplementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    testImplementation "log4j:log4j:${log4jVersion}"
  }
    
  test {
    exclude "**/*IT.class"
    jvmArgs += baseJvmArgs
    systemProperties getBlackstromSystemProperties()
  }
  
  task integrationTest(type: Test, description: "Runs integration tests", group: "Verification") {
    include "**/*IT.class"
    jvmArgs += baseJvmArgs
    systemProperties getBlackstromSystemProperties()
  }

  jacoco {
    toolVersion = "0.8.8"
  }
  
  task verify {  
    dependsOn test
    dependsOn integrationTest
  }

  jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    executionData.from = files("$buildDir/jacoco/test.exec") + files("$buildDir/jacoco/integrationTest.exec")
    reports {
      html.required = true
      xml.required = true
      csv.required = false
    }
  }
}

subprojects {
  dependencies {
    testImplementation project(":").sourceSets.test.output
  }
}

task jacocoRootReport(type: JacocoReport) {
  mustRunAfter = allprojects.test + allprojects.integrationTest + allprojects.javadoc + allprojects.compileTestJava + allprojects.processTestResources
  additionalSourceDirs.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(allprojects.sourceSets.main.output)
  executionData.setFrom project.fileTree(dir: '.', include: ['**/build/jacoco/test.exec', '**/build/jacoco/integrationTest.exec'])
  reports {
    html.required = true
    xml.required = true
    csv.required = false
  }
  onlyIf = {
    true
  }
  afterEvaluate {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["sample/**", "**/*Uncovered*", "**/generated/**"])
    })
  }
}

def packageName = "blackstrom-core"
def packageDescription = "Transactional event fabric for the JVM"

dependencies {
  api "com.obsidiandynamics.fulcrum:fulcrum-concat:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-flow:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-format:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-func:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-nanoclock:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-nodequeue:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-props:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-random:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-scheduler:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-worker:${fulcrumVersion}"
  api "com.obsidiandynamics.yconf:yconf-core:${yconfVersion}"
  api "com.obsidiandynamics.zerolog:zerolog-core:${zerologVersion}"
  api "org.apache.commons:commons-lang3:${commonsLangVersion}"
  api "com.obsidiandynamics.zerolog:zerolog-slf4j17:${zerologVersion}"
  api "org.slf4j:slf4j-api:${slf4jVersion}"
  
  testImplementation "com.obsidiandynamics.fulcrum:fulcrum-launcher:${fulcrumVersion}"
}

task launch(dependsOn: testClasses) {
  doLast {
    def launcherClasses = new ArrayList()
    launcherClasses += "com.obsidiandynamics.blackstrom.ledger.MultiNodeQueueLedgerTest"
    
    def perfJvmArgs = "-XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark " + 
                      "-Xms2G -Xmx2G -Xss1M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 " +
                      "-XX:InitiatingHeapOccupancyPercent=0 -Djava.net.preferIPv4Stack=true " + 
                      "-Dlauncher.package.compress.level=3"
    javaexec {
      systemProperties = System.properties
      classpath = sourceSets.test.runtimeClasspath
      mainClass = "com.obsidiandynamics.launcher.Launcher"
      args = launcherClasses
      jvmArgs = Arrays.asList(perfJvmArgs.split(" ")) + baseJvmArgs
      standardInput = System.in
    }
  }
}

jar {
  finalizedBy jacocoRootReport
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = packageName
      from components.java
      pom {
        name = packageName
        description = packageDescription
        url = 'https://github.com/obsidiandynamics/blackstrom'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://opensource.org/licenses/BSD-3-Clause'
          }
        }
        developers {
          developer {
            id = 'ekoutanov'
            name = 'Emil Koutanov'
            email = 'ekoutanov@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/obsidiandynamics/blackstrom.git'
          developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/blackstrom.git'
          url = 'https://github.com/obsidiandynamics/blackstrom'
        }
      }
    }
  }
}
